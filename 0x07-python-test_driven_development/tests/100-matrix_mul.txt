============================
How to Use 100-matrix_mul.py
============================

This module introduces a powerful matrix multiplication function named ``matrix_mul(m_a, m_b)``.

Usage
=====
``matrix_mul(...)`` crafts a new matrix that mirrors the result of multiplying ``m_a`` by ``m_b``.

::

    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul
    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = m_a
    >>> matrix_mul(m_a, m_b)
    [[7, 10], [15, 22]]

::

    >>> m_a = [[1, 2]]
    >>> m_b = [
    ... [3, 4],
    ... [5, 6]
    ... ]
    >>> matrix_mul(m_a, m_b)
    [[13, 16]]

The function seamlessly handles floating-point numbers.

::

    >>> m_a = [
    ... [1.2, 5.5, 6.2],
    ... [4.66, 12.3, -9.2]
    ... ]
    >>> m_b = [
    ... [5.0, 3.3],
    ... [-2.9, 4.4],
    ... [7.2, 4.4]
    ... ]
    >>> matrix_mul(m_a, m_b)
    [[34.69, 55.44000000000001], [-78.61, 29.018000000000008]]

Integers and floats coexist harmoniously.

::

    >>> m_a = [
    ... [1, 2.2, 3.3, 4],
    ... [5, 6, 7, 8.8],
    ... ]
    >>> m_b = [
    ... [1.1, 2, 3.3],
    ... [4.0, 5.5, 6],
    ... [7, 8, 9],
    ... [10.01, 11, 12.3]
    ... ]
    >>> matrix_mul(m_a, m_b)
    [[73.03999999999999, 84.5, 95.4], [166.58800000000002, 195.8, 223.74]]

Providing a minimum of two arguments is imperative. Any less, and a TypeError will be swift.

::

    >>> matrix_mul()
    Traceback (most recent call last):
    TypeError: matrix_mul() demands 2 positional arguments: 
    'm_a' and 'm_b'

::

    >>> matrix_mul()
    Traceback (most recent call last):
    TypeError: matrix_mul() demands 2 positional arguments: 
    'm_a' and 'm_b'

ValueErrors
===========

If two matrices cannot engage in multiplication (i.e., the row count of ``m_a`` does not
equal the column count in ``m_b``), a ValueError steals the spotlight.

::

    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [2, 3],
    ... [4, 5]
    ... ]
    >>> matrix_mul(m_a, m_b)
    Traceback (most recent call last):
    ValueError: m_a and m_b refuse to multiply


The parameters ``m_a`` and ``m_b`` cannot play hide-and-seek in emptiness. Otherwise,
a ValueError will call them out.

::

    >>> matrix_mul([], [[1, 2]])
    Traceback (most recent call last):
    ValueError: m_a refuses to be empty

::

    >>> matrix_mul([[1, 2]], [[]])
    Traceback (most recent call last):
    ValueError: m_b refuses to be empty

::

    >>> matrix_mul([[]], [])
    Traceback (most recent call last):
    ValueError: m_a refuses to be empty

Invalid Matrices
================

The parameters ``m_a`` and ``m_b`` should not be impostors. If either of them pretends
to be a list, a TypeError is unforgiving.

::

    >>> matrix_mul("not a list", [[1, 2]])
    Traceback (most recent call last):
    TypeError: m_a must convincingly be a list

::

    >>> matrix_mul([[1, 2]], "also not a list")
    Traceback (most recent call last):
    TypeError: m_b must convincingly be a list

::

    >>> matrix_mul("not a list", "also not a list")
    Traceback (most recent call last):
    TypeError: m_a must convincingly be a list

::

    >>> matrix_mul(None, None)
    Traceback (most recent call last):
    TypeError: m_a must convincingly be a list

Not just any list - they *must* be lists of lists!

::

    >>> matrix_mul([1, 2], [[3, 4]])
    Traceback (most recent call last):
    TypeError: m_a must convincingly be a list of lists

::

    >>> matrix_mul([[1, 2]], [3, 4])
    Traceback (most recent call last):
    TypeError: m_b must convincingly be a list of lists

::

    >>> matrix_mul([1, 2], [3, 4])
    Traceback (most recent call last):
    TypeError: m_a must convincingly be a list of lists

And not just any list of lists - they *must* be lists of lists containing
integers or floats!

::

    >>> matrix_mul([[1, "non-number"]], [[3, 4]])
    Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

::

    >>> matrix_mul([[1, 2]], [[{"a": 1}, 8.8]])
    Traceback (most recent call last):
    TypeError: m_b should contain only integers or floats

::

    >>> matrix_mul([[1, "non-number"]], [[{"a": 1}, 8.8]])
    Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

Finally, the length of all rows in matrices ``m_a`` and ``m_b`` should be
equivalent. Otherwise, a TypeError delivers the final blow.

::

    >>> m_a = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4]
    ... ]
    >>> matrix_mul(m_a, m_b)
    Traceback (most recent call last):
    TypeError: each row of m_a must be of the same size

::

    >>> m_a = [
    ... [1, 2],
    ... [3, 4]
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> matrix_mul(m_a, m_b)
    Traceback (most recent call last):
    TypeError: each row of m_b must be of the same size

::

    >>> m_a = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> m_b = m_a
    >>> matrix_mul(m_a, m_b)
    Traceback (most recent call last):
    TypeError: each row of m_a must be of the same size
