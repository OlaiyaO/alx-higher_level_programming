===========================
How to Use 0-add_integer.py
===========================

his module introduces a function for adding integers, called ``add_integer(a, b=98)``.

How to use
==========

``add_integer(...)`` returns the sum of its two arguments. For numerical values, this is equivalent to using the ``+`` operator.

::

    >>> add_result = __import__('0-add_integer').add_integer
    >>> add_result(5, 7)
    12

::

    >>> add_result(-2, 8)
    6

The function also handles floating-point values.

::

    >>> add_result(3.5, 1.5)
    5

Note that floats are converted to integers before addition.

::

    >>> add_result(2.8, 0.2)
    2

::

    >>> add_result(-3.9, -0.1)
    -4

It is possible to combine floating-point and integer values.

::

    >>> add_result(1.3, -2)
    -1

The second argument is optional, defaulting to 98.

::

    >>> add_result(2)
    100

Non-numeric Values
==================

``add_integer()`` expects both arguments to be integers or floats. If either argument is neither an integer nor a float, a TypeError is raised:

::

    >>> add_result("apple", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_result(4, "orange")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_result(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_result(5.5, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-numerical, a TypeError message is only printed for the first argument.

::

    >>> add_result("hello", "world")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_result(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::

    >>> add_result(3, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

The function will also raise an error for NaN values.

::

    >>> add_result(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_result(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
