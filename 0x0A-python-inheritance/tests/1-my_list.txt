# 1-my_list.txt

=======================
How to Use 1-my_list.py
=======================

This module introduces a class `MyList` that inherits from `list`.

Instantiation
=============

`MyList` can be instantiated without arguments, creating an empty list:

>>> MyList = __import__('1-my_list').MyList
>>> my_list = MyList()
>>> type(my_list)
<class '1-my_list.MyList'>
>>> print(my_list)
[]

Or with a single argument, an iterable object:

>>> my_list = MyList([10, 20, 30])
>>> print(my_list)
[10, 20, 30]

Attempting multiple instantiation arguments raises a TypeError:

>>> my_list = MyList([10, 20], [30, 40])
Traceback (most recent call last):
TypeError: list() takes at most 1 argument (2 given)

Usage
=====

`MyList` inherits `list` methods. For example, add elements with `append()`:

>>> my_list = MyList()
>>> my_list.append(100)
>>> my_list.append(200)
>>> my_list.append(300)
>>> print(my_list)
[100, 200, 300]

Replaced with indexing:

>>> my_list[0] = 500
>>> print(my_list)
[500, 200, 300]

Remove with the `remove()` method:

>>> my_list.remove(500)
>>> print(my_list)
[200, 300]

`print_sorted` Method
=======================

`MyList` implements a method - a public instance method `print_sorted(self)`:

>>> my_list = MyList()
>>> print(my_list.print_sorted)
<bound method MyList.print_sorted of []>

The method takes no arguments; providing one raises a TypeError:

>>> my_list.print_sorted(1)
Traceback (most recent call last):
TypeError: print_sorted() takes 1 positional argument but 2 were given

The method prints the list in ascending sorted order:

>>> my_list.append(100)
>>> my_list.append(400)
>>> my_list.append(200)
>>> my_list.append(300)
>>> my_list.append(500)
>>> print(my_list)
[100, 400, 200, 300, 500]

>>> my_list.print_sorted()
[100, 200, 300, 400, 500]

The original list order remains unaltered:

>>> print(my_list)
[100, 400, 200, 300, 500]

Lists of strings are sorted lexicographically:

>>> my_list = MyList()
>>> my_list.append("Zara")
>>> my_list.append("John")
>>> my_list.append("Alice")
>>> my_list.append("Bob")
>>> my_list.append("Charlie")
>>> print(my_list)
['Zara', 'John', 'Alice', 'Bob', 'Charlie']

>>> my_list.print_sorted()
['Alice', 'Bob', 'Charlie', 'John', 'Zara']

The original list is unaltered:

>>> print(my_list)
['Zara', 'John', 'Alice', 'Bob', 'Charlie']

Empty lists have nothing to sort:

>>> my_list = MyList()
>>> my_list.print_sorted()
[]

Calling `print_sorted()` on a list of different types raises a TypeError:

>>> my_list = MyList([1, "Alice", "Bob", 5])
>>> my_list.print_sorted()
Traceback (most recent call last):
TypeError: unorderable types: str() < int()

>>> MyList = __import__('1-my_list').MyList

Test with a list containing the same number multiple times:

>>> my_list = MyList()
>>> my_list.append(3)
>>> my_list.append(3)
>>> my_list.append(3)
>>> my_list.append(3)
>>> my_list.print_sorted()
[3, 3, 3, 3]

Test attempting to use an undefined object:

>>> my_list2.print_sorted()
Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
NameError: name 'my_list2' is not defined

Test with a list containing negative numbers:

>>> my_list = MyList()
>>> my_list.append(7)
>>> my_list.append(-2)
>>> my_list.append(-9)
>>> my_list.append(0)
>>> my_list.append(-1)
>>> my_list.print_sorted()
[-9, -2, -1, 0, 7]

Test attempting to use the print_sorted method on a regular list:

>>> my_list = [5, 2, 8]
>>> my_list.print_sorted()
Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'print_sorted'

Test with a list containing unique numbers:

>>> my_list = MyList()
>>> my_list.append(6)
>>> my_list.print_sorted()
>>> print(my_list)
[6]

Test with a list passed as an argument during instantiation:

>>> a = [1, 9, 4]
>>> my_list = MyList(a)
>>> my_list.print_sorted()
[1, 4, 9]

Test with a common case of adding, printing, and sorting a list:

>>> my_list = MyList()
>>> my_list.append(9)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(1)
>>> my_list.append(5)
>>> print(my_list)
[9, 4, 2, 1, 5]
>>> my_list.print_sorted()
[1, 2, 4, 5, 9]
>>> print(my_list)
[9, 4, 2, 1, 5]
